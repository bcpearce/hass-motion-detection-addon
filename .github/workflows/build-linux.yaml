name: Build Project (Linux)

on:
  - push
  - pull_request

env:
  USERNAME: bcpearce
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
  VCPKG_GIT_REF: 8f54ef5453e7e76ff01e15988bf243e7247c5eb5
  FEED_URL: https://nuget.pkg.github.com/bcpearce/index.json
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/bcpearce/index.json,readwrite"
  DOCKER_REGISTRY_IMAGE: "bcpearce/hass-motion-detection-addon"

jobs:

  build_and_test:
    name: Build and Test (Linux)
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
        include:
          - arch: amd64
            os: ubuntu-24.04
          - arch: arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    container:
      image: bcpearce/opencv-cmake:v1-${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v4
      - name: Get VCPKG
        run: |
            git clone https://github.com/microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
            cd ${{ env.VCPKG_ROOT }} && git checkout ${{ env.VCPKG_GIT_REF }}
      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh
      - name: Add NuGet sources
        env:
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
          USERNAME: bcpearce
          FEED_URL: https://nuget.pkg.github.com/bcpearce/index.json
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"
      - name: Generate and Configure Debug
        run: cmake . --preset=Debug -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
      - name: Build Debug
        run: cmake --build build/Debug
      - name: Test Debug
        run: ./build/Debug/tests/MotionDetectionTests --gtest_output=xml
      - name: Generate and Configure Release
        run: cmake . --preset=Release -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
      - name: Build Release
        run: cmake --build build/Release
      - name: Test Release
        run: ./build/Release/tests/MotionDetectionTests --gtest_output=xml
      - name: Pack
        run: cd build/Release && cpack -G DEB  -DCPACK_DEBIAN_FILE_NAME=motion-detection-${{ matrix.arch }}.deb
      - name: Upload .deb Artifact
        uses: actions/upload-artifact@v4
        with:
          name: motion-detection-deb-${{ matrix.arch }}
          path: build/Release/motion-detection-${{ matrix.arch }}.deb
          if-no-files-found: error

  build_docker_image:
    name: Build and Upload Docker Image (Linux)
    needs: build_and_test
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
        include:
          - arch: amd64
            os: ubuntu-24.04
            platform: linux/amd64
          - arch: arm64
            os: ubuntu-24.04-arm
            platform: linux/amd64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_IMAGE }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download packed build
        uses: actions/download-artifact@v4
        with:
          name: motion-detection-deb-${{ matrix.arch }}
          path: ${{ github.workspace }}/docker/deploy
      - name: Build and push by digest
        uses: docker/build-push-action@v6
        id: build
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          context: .
          file: ./docker/deploy/Dockerfile
          build-args: MOTION_DETECTION_DEB=./docker/deploy/motion-detection-${{ matrix.arch }}.deb
          tags: ${{ env.DOCKER_REGISTRY_IMAGE }}
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build_docker_image
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_IMAGE }}
          tags: |
            type=edge,branch=main
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}